// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    ALU(x=regDout, y=aluMuxOut, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=regDin, out=AluToMux1, zr=isZero, ng=isNeg);//, zr=, ng=);
	PC(in=regiserAout, load=loadPC , inc=incPC , reset=reset, out[0..14]=pc); //TODO fix false !!!

	Not(in=ins0and1and2, out=Notins0and1and2);
	And(a=instruction[15], b=Notins0and1and2, out=ins15and0and1and2);//no jump
	Or(a=ins15and0and1and2, b=notInstructionMsb, out=incPC);
	
	Or(a=jmp, b=jeq, out=JmpOrJeq);
	Or(a=JmpOrJeq, b=jlt, out=JmpOrJeqOrJlt);
	Or(a=jne, b=JmpOrJeqOrJlt, out=JmpOrJeqOrJltorJne);
	Or(a=jle, b=JmpOrJeqOrJltorJne, out=JmpOrJeqOrJltorJneOrJle);
	And(a=instruction[15], b=JmpOrJeqOrJltorJneOrJle, out=loadPC);
	
	
	
	Not(in=instruction[0], out=notins0);
	Not(in=instruction[1], out=notins1);
	Not(in=instruction[2], out=notins2);
	Not(in=isZero, out=notisZero);
	Not(in=isNeg, out=notisNeg);

	And(a=notisNeg, b=notisZero, out=isGT); //is GT (r>0)
	And(a=notisZero, b=isNeg, out=isLT); //is LT (r<0)	
	And(a=isZero, b=notisNeg, out=eqZero); //equals zero

	//jmp i2=1, i1=1, i0=1
	And(a=instruction[0], b=instruction[1], out=ins01);
	And(a=ins01, b=instruction[2], out=jmp);
	
	//jgt i2=0, i1=0, i0=1, isNeg=0, isZero=0
	And(a=notins2, b=notins1, out=notins12);
	And(a=instruction[0], b=notins12, out=isJgt);
	And(a=isGT, b=isJgt, out=jgt);
	
	//jeq i2=0, i1=1, i0=0 isZero=1;
	And(a=notins0, b=notins2, out=notins02);
	And(a=notins02, b=instruction[1], out=isJeq);
	And(a=isZero, b=isJeq, out=jeq);
	
	//jge i2=0, i1=1, i0=1, isneg=0
	And(a=instruction[0], b=instruction[1], out=ins01);
	And(a=notins2, b=ins01, out=isJge);
	And(a=notisNeg, b= isJge, out=jge);	
	
	//jlt -  i2=1 i1=0 ins2=0 isneg=1
	And(a=notins0, b=notins1, out=notins01);
	And(a=notins01, b=instruction[2], out=isJlt);
	And(a=isLT, b=isJlt, out=jlt);
	
	//jne - i2=1 i1=0 i0=1 isZero=0
	And(a=instruction[0], b=instruction[2], out=ins02);
	And(a=ins02, b=notins1, out=isJne);
	And(a=notisZero, b=isJne, out=jne);
	
	//jle ins2=1, in1=1, ins0=0, isneg=1
	And(a=instruction[2], b=instruction[1], out=ins21);
	And(a=notins0, b=ins21, out=isJle);
	Or(a=isNeg, b=isZero, out=isNegOrZero);
	And(a=isJle, b=isNegOrZero, out=jle);
	
	Not(in=instruction[15], out=notInstructionMsb);
	
	Mux16(a=instruction, b=AluToMux1, sel=ins15and5, out=regAin); //registerA MUX
	
	Mux16(a=regiserAout, b=inM, sel=ins15and12, out=aluMuxOut);  //AluMux

	And(a=instruction[15], b=instruction[12], out=ins15and12); //bit 12 && 15 -> bit "a" - A/M -> x(alu)
	And(a=instruction[15], b=instruction[5], out=ins15and5); //bit 5 && 15 -> update A register
	And(a=instruction[15], b=instruction[4], out=regDload);  //bit 4 && 15 -> update D register
	And(a=instruction[15], b=instruction[3], out=writeM); // //bit 3 && 15 -> update M(RAM[A]) register
	
	Or(a=notInstructionMsb, b=ins15and5, out=regAload);
	
	Register(in=regAin, load=regAload, out=regiserAout, out[0..14]=addressM); //A register
	
	Register(in=regDin, load=regDload, out=regDout); //D register
}